---

- name: Ensure docker was setup once on this host
  include_role: name=yourlabs.docker
  when: ansible_facts['ansible_local']['yourlabs_docker']['state']|default('') != 'success'

- name: Install logrotate and curl
  package:
    name: logrotate,curl
    state: latest

- name: Make /usr/local/lib/docker/cli-plugins
  file:
    state: directory
    path: /usr/local/lib/docker/cli-plugins

- name: Detect if /usr/local/lib/docker/cli-plugins/docker-compose is installed and working
  register: compose_version
  failed_when: false
  shell:
    /usr/local/lib/docker/cli-plugins/docker-compose version

- name: Install docker compose
  when: compose_version.rc != 0
  shell: |
     set -eux
     rel=$(curl -s https://api.github.com/repos/docker/compose/releases/latest | python -c 'import sys, json; print(json.loads(sys.stdin.read())["tag_name"])')
     curl -SL https://github.com/docker/compose/releases/download/$rel/docker-compose-linux-x86_64 -o /usr/local/lib/docker/cli-plugins/docker-compose
     chmod +x /usr/local/lib/docker/cli-plugins/docker-compose
     /usr/local/lib/docker/cli-plugins/docker-compose version

- name: Create temporary build directory to render jinja2
  register: tempdir
  tempfile:
    state: directory
    suffix: build

- name: Download compose file
  when: compose.startswith('https://') or compose.startswith('http://')
  delegate_to: localhost
  block:
  - get_url:
      url: '{{ compose }}'
      dest: '{{ tempdir.path }}/docker-compose.yml'
  - set_fact:
     compose: 'docker-compose.yml'

- name: Copy all local compose files
  when: not (item.startswith('https://') or item.startswith('http://'))
  loop: '{{ compose.split(",") }}'
  template:
    src: '{% if not item.startswith("/") %}{{ lookup("env", "PWD") + "/" }}{% endif %}{{ item }}'
    dest: '{{ tempdir.path }}'

- name: Generate docker-compose config from yaml files
  shell: docker compose {% for f in compose.split(",") %} -f {{ tempdir.path }}/{{ f }}{% endfor %} config
  register: compose_content
  environment: '{{ true|allenv }}'
  changed_when: false
  args:
    executable: /bin/bash

- name: Set home for project
  when: home is not defined
  set_fact:
    home: '{{ ansible_user_dir + "/.yourlabs.compose/" + project|default("default") }}'

- name: Make home directory
  file:
    path: '{{ home }}'
    state: directory

- debug: msg='{{ lookup("env", "PROTO")|default("http") == "https" }}'

- include: backup.yml
  when: project is not defined

- name: Get the docker networks list
  shell: docker network ls --format '{{ "{{ .Name }}" }}'
  changed_when: false
  register: docker_network_ls

- set_fact: { compose_content: '{{ compose_content.stdout }}' }

- name: Generate compose content
  set_fact:
    compose_content: '{{ compose_content|docker_compose_rewrite(hostvars[inventory_hostname], docker_network_ls.stdout_lines) }}'

- name: Print final compose after rewrite based on Ansible variables
  debug: var=compose_content

- name: Get external networks and directories from compose contents
  set_fact:
    external_config: '{{ compose_content|docker_compose_external_config }}'
    external_networks: '{{ compose_content|docker_compose_external_networks }}'

- name: Create directories from io.yourlabs.compose.mkdir
  loop: '{{ external_config.get("mkdir", []) }}'
  file:
    state: directory
    path: '{{ home }}/{{ item.path }}'
    owner: '{{ item.owner }}'
    group: '{{ item.group }}'
    mode: '{{ item.mode }}'

- name: Create docker networks
  docker_network:
    name: '{{ item }}'
  loop: '{{ external_networks }}'

- name: Upload compose file
  copy:
    content: '{{ compose_content }}'
    dest: '{{ home }}/docker-compose.yml'

- name: Login to docker registry
  when: docker_auth_username and docker_auth_password and docker_auth_registry
  docker_login:
    username: '{{ docker_auth_username }}'
    password: '{{ docker_auth_password }}'
    registry: '{{ docker_auth_registry }}'
    config_path: '{{ home if home is defined else ansible_user_dir + "/" + project }}/.docker/config.json'

- name: docker compose pull
  environment:
    DOCKER_CONFIG: '{{ home }}/.docker'
  shell: docker compose pull
  args:
    chdir: '{{ home }}'
  when: pull|default(False)

- name: docker compose build
  environment:
    DOCKER_CONFIG: '{{ home }}/.docker'
  shell: docker compose build
  args:
    chdir: '{{ home }}'
  when: build|default(False)

- name: docker compose up
  environment:
    DOCKER_CONFIG: '{{ home }}/.docker'
  args:
    chdir: '{{ home }}'
  shell: docker compose up -d

- name: Schedule stack for removal
  when: lifetime|default(False)
  include_tasks: removal.yml

- name: Configuration des logrotates
  copy:
    dest: /etc/logrotate.d/yourlabs.compose
    content: |
      /home/*/log/*.log {
        daily
        missingok
        rotate 36
        compress
        notifempty
        create 0640 1000 1000
        sharedscripts
      }

- name: Wait logs
  shell: docker compose logs | grep '{{ wait_grep }}'
  when: wait_grep is defined
  register: wait_grep_result
  until: not wait_grep_result.rc
  retries: 30
  delay: 5
  args:
    chdir: '{{ home }}'
    executable: /bin/bash

- name: Execute post-deploy commands
  when: postdeploy is defined and postdeploy.strip().replace('\n', '')|length
  shell: '{{ postdeploy }}'
  args:
    chdir: '{{ home }}'

- include: check.yml
